import 'package:flutter/material.dart';
import 'package:gestion_des_membres/screens/personne_physique_non_exploitant/personnePhysiqueAddPage2.dart';
import 'package:intl/intl.dart';
import 'package:nb_utils/nb_utils.dart';

import '../../config/constants.dart';
import '../../models/Member.dart';
import '../../utils/design.util.dart';

class PersonnePhysiqueAddPage1 extends StatefulWidget {
  final Member member;

  const PersonnePhysiqueAddPage1({Key? key, required this.member})
      : super(key: key);

  @override
  State<PersonnePhysiqueAddPage1> createState() =>
      _PersonnePhysiqueAddPage1State();
}

class _PersonnePhysiqueAddPage1State extends State<PersonnePhysiqueAddPage1> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  List _sex = ['Homme', 'Femme'];
  List _professions = ['Producteur', 'Fournisseur', 'Revendeur'];
  List _languages = ['Fon', 'French', 'Anglais'];
  TextEditingController _birthDateController = TextEditingController();

  @override
  void initState() {
    super.initState();
    Intl.defaultLocale = "fr_FR";
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: Builder(
          builder: (BuildContext context) {
            return IconButton(
              icon: Icon(Icons.arrow_back_ios),
              onPressed: () {
                Navigator.pop(context);
              },
              tooltip: MaterialLocalizations.of(context).openAppDrawerTooltip,
            );
          },
        ),
        elevation: 0,
        titleSpacing: 40,
        centerTitle: true,
        backgroundColor: primaryColor,
        title: Text("Etape 1/5"),
      ),
      body: SingleChildScrollView(
          child: Form(
        key: _formKey,
        child: Column(children: [
          Container(
            child: Padding(
              padding: const EdgeInsets.all(15.0),
              child: Text(
                "Veuillez renseigner les informations primitives du membre :",
                textAlign: TextAlign.center,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: AppTextField(
              isValidationRequired: true,
              errorThisFieldRequired: "Ce champ est requis",
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return "Ce champ est requis";
                }
                return null;
              },
              onChanged: (value) {
                setState(() {
                  widget.member.lastName = value;
                });
              },
              // Optional
              textFieldType: TextFieldType.OTHER,
              decoration: InputDecoration(
                  labelText: 'Nom du membre', border: OutlineInputBorder()),
            ),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: AppTextField(
              isValidationRequired: true,
              errorThisFieldRequired: "Ce champ est requis",
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return "Ce champ est requis";
                }
                return null;
              },
              keyboardType: TextInputType.text,
              onChanged: (value) {
                setState(() {
                  widget.member.firstName = value;
                });
              },
              // Optional
              textFieldType: TextFieldType.NAME,
              decoration: InputDecoration(
                  labelText: 'Prenom du membre', border: OutlineInputBorder()),
            ).validate(),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: DropdownButtonFormField(
              style:
                  TextStyle(color: Colors.black, fontWeight: FontWeight.bold),
              items: _sex.map((item) {
                return new DropdownMenuItem(
                  value: item,
                  child: new Text(item),
                );
              }).toList(),
              onChanged: (value) {
                setState(() {
                  widget.member.gender = value.toString();
                });
              },
              autovalidateMode: AutovalidateMode.onUserInteraction,
              validator: (value) {
                if ((value == null)) {
                  return 'Ce champ est requis';
                }
              },
              decoration: themeInputDecoration.copyWith(labelText: 'Genre'),
            ),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(
                      width: 1,
                      color: kGreyColor,
                    )),
                margin: EdgeInsets.symmetric(vertical: 8),
                child: TextFormField(
                  style: TextStyle(fontWeight: FontWeight.normal),
                  readOnly: true,
                  controller: _birthDateController,
                  decoration: InputDecoration(
                    fillColor: Colors.transparent,
                    suffixIcon: IconButton(
                        icon: Icon(Icons.calendar_month_sharp),
                        onPressed: () async {
                          DateTime? date = DateTime(1900);
                          FocusScope.of(context).requestFocus(new FocusNode());
                          date = await showDatePicker(
                              context: context,
                              initialDate: DateTime.now(),
                              firstDate: DateTime(1900),
                              lastDate: DateTime(2100),
                              locale: const Locale('fr', 'FR'));

                          _birthDateController.text =
                              DateFormat().add_jms().format(date!);
                          setState(() {
                            widget.member.dateOfBirth =
                                _birthDateController.text.trim();
                          });
                        },
                        iconSize: 18),
                    hintText: 'Date de naissance du membre',
                    filled: true,
                    contentPadding: new EdgeInsets.symmetric(
                        vertical: 18.0, horizontal: 10.0),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(5.0),
                      borderSide: BorderSide(
                        color: Colors.blue,
                      ),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(5.0),
                      borderSide: BorderSide(
                        width: 0.0,
                      ),
                    ),
                  ),
                  onTap: () async {
                    DateTime? date = DateTime(1900);
                    FocusScope.of(context).requestFocus(new FocusNode());

                    date = await showDatePicker(
                      context: context,
                      initialDate: DateTime.now(),
                      firstDate: DateTime(1900),
                      lastDate: DateTime(2100),
                      locale: const Locale('fr', 'FR'),
                    );

                    _birthDateController.text =
                        DateFormat().add_yMd().format(date!);
                    setState(() {
                      widget.member.dateOfBirth =
                          _birthDateController.text.trim();
                    });
                  },
                )),
          ),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: AppTextField(
              isValidationRequired: true,
              errorThisFieldRequired: "Ce champ est requis",
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return "Ce champ est requis";
                }
                return null;
              },
              onChanged: (value) {
                setState(() {
                  widget.member.birthplace = value;
                });
              },
              // Optional
              textFieldType: TextFieldType.EMAIL,
              decoration: InputDecoration(
                  labelText: 'Lieu de naissance du membre',
                  border: OutlineInputBorder()),
            ).validate(),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: AppTextField(
              initialValue: 'Bénin',
              enabled: false,
              isValidationRequired: true,
              errorThisFieldRequired: "Ce champ est requis",
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return "Ce champ est requis";
                }
                return null;
              },

              // Optional
              textFieldType: TextFieldType.NAME,
              decoration: InputDecoration(
                  labelText: 'Nationalité du membre',
                  border: OutlineInputBorder()),
            ).validate(),
          ),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 2),
                child: DropdownButtonFormField(
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: _professions.map((item) {
                    return new DropdownMenuItem(
                      value: item,
                      child: new Text(item),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      widget.member.profession = value.toString();
                    });
                  },
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  validator: (value) {
                    if ((value == null)) {
                      return 'Ce champ est requis';
                    }
                  },
                  decoration: themeInputDecoration.copyWith(
                      labelText: 'Profession du membre'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 2),
                child: DropdownButtonFormField(
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: _languages.map((item) {
                    return new DropdownMenuItem(
                      value: item,
                      child: new Text(item),
                    );
                  }).toList(),
                  onChanged: (value) {
                    widget.member.language = value.toString();
                  },
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  validator: (value) {
                    if (value == null) {
                      return 'Ce champ est requis';
                    }
                    return null;
                  },
                  decoration: themeInputDecoration.copyWith(
                      labelText: 'Langue du membre'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          20.height,
          Container(
              margin: EdgeInsets.only(
                left: 48,
                right: 48,
                bottom: 18,
              ),
              child: SizedBox(
                width: double.infinity,
                height: 50.0,
                child: ElevatedButton(
                  style: ButtonStyle(
                      backgroundColor:
                          MaterialStateProperty.all<Color>(primaryColor),
                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                          RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ))),
                  onPressed: () {
                    if (_formKey.currentState!.validate()) {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) => PersonnePhysiqueAddPage2(
                                  member: widget.member)));
                    }
                  },
                  child: Icon(
                    Icons.arrow_circle_right_outlined,
                    color: Colors.white,
                  ),
                ),
              )),
        ]),
      )),
    );
  }
}
