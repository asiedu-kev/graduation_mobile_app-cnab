import 'package:flutter/material.dart';
import 'package:gestion_des_membres/database/member_helper.dart';
import 'package:gestion_des_membres/screens/memberSuccessfullyAddedPage.dart';
import 'package:nb_utils/nb_utils.dart';

import '../../config/constants.dart';
import '../../models/Member.dart';
import '../../utils/design.util.dart';

class PersonnePhysiqueAddPage5 extends StatefulWidget {
  final Member member;

  const PersonnePhysiqueAddPage5({Key? key, required this.member})
      : super(key: key);

  @override
  State<PersonnePhysiqueAddPage5> createState() =>
      _PersonnePhysiqueAddPage5State();
}

class _PersonnePhysiqueAddPage5State extends State<PersonnePhysiqueAddPage5> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  List _payments = ["Especes", "Mobile Money", "Depot Bancaire"];
  List _offers = ["Offre 1", "Offre 2", "Offre 3"];

  @override
  void initState() {
    super.initState();
    if (widget.member.category == "personne physique - non exploitant") {
      widget.member.inscriptionFee = personnePhysique["inscriptionFee"];
      widget.member.membershipFee = personnePhysique["membershipFee"];
    } else if (widget.member.category == "personne physique - exploitant") {
      widget.member.inscriptionFee =
          personnePhysiqueExploitant["inscriptionFee"];
      widget.member.membershipFee = personnePhysiqueExploitant["membershipFee"];
    } else {
      widget.member.inscriptionFee = personneMorale["inscriptionFee"];
      widget.member.membershipFee = personneMorale["membershipFee"];
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: Builder(
          builder: (BuildContext context) {
            return IconButton(
              icon: Icon(Icons.arrow_back_ios),
              onPressed: () {
                Navigator.pop(context);
              },
              tooltip: MaterialLocalizations.of(context).openAppDrawerTooltip,
            );
          },
        ),
        elevation: 0,
        titleSpacing: 40,
        centerTitle: true,
        backgroundColor: primaryColor,
        title: Text("Etape 5/5"),
      ),
      body: SingleChildScrollView(
          child: Form(
        key: _formKey,
        child: Column(children: [
          Container(
            child: Padding(
              padding: const EdgeInsets.all(15.0),
              child: Text(
                "Veuillez renseigner les besoins du membre :",
                textAlign: TextAlign.center,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 5),
                child: DropdownButtonFormField(
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: _offers.map((item) {
                    return new DropdownMenuItem(
                      value: item,
                      child: new Text(item),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      widget.member.mainService = value.toString();
                    });
                  },
                  decoration:
                      themeInputDecoration.copyWith(labelText: 'Offre 1'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 2),
                child: DropdownButtonFormField(
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: _offers.map((item) {
                    return new DropdownMenuItem(
                      value: item,
                      child: new Text(item),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      widget.member.secondaryService = value.toString();
                    });
                  },
                  decoration:
                      themeInputDecoration.copyWith(labelText: 'Offre 2'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 2),
                child: DropdownButtonFormField(
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: _offers.map((item) {
                    return new DropdownMenuItem(
                      value: item,
                      child: new Text(item),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      widget.member.occasionalService = value.toString();
                    });
                  },
                  decoration:
                      themeInputDecoration.copyWith(labelText: 'Offre 3'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: AppTextField(
              initialValue: widget.member.inscriptionFee.toString(),
              enabled: false,
              isValidationRequired: true,
              errorThisFieldRequired: "Ce champ est requis",
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return "Ce champ est requis";
                }
                return null;
              },
              onChanged: (value) {},
              // Optional
              textFieldType: TextFieldType.OTHER,
              decoration: InputDecoration(
                  labelText: 'Montant de l\'inscription du membre',
                  border: OutlineInputBorder()),
            ),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: AppTextField(
              initialValue: widget.member.membershipFee.toString(),
              enabled: false,
              isValidationRequired: true,
              errorThisFieldRequired: "Ce champ est requis",
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return "Ce champ est requis";
                }
                return null;
              },
              onChanged: (value) {},
              // Optional
              textFieldType: TextFieldType.OTHER,
              decoration: InputDecoration(
                  labelText: 'Montant de la cotisation du membre',
                  border: OutlineInputBorder()),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 2),
                child: DropdownButtonFormField(
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: _payments.map((item) {
                    return new DropdownMenuItem(
                      value: item,
                      child: new Text(item),
                    );
                  }).toList(),
                  onChanged: (value) {},
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  validator: (value) {
                    if ((value == null)) {
                      return 'Ce champ est requis';
                    }
                    return null;
                  },
                  decoration: themeInputDecoration.copyWith(
                      labelText: 'Moyen de paiement'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          20.height,
          Container(
              margin: EdgeInsets.only(left: 48, right: 48, bottom: 18),
              child: SizedBox(
                width: double.infinity,
                height: 50.0,
                child: ElevatedButton(
                  style: ButtonStyle(
                      backgroundColor:
                          MaterialStateProperty.all<Color>(primaryColor),
                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                          RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ))),
                  onPressed: () {
                    if (_formKey.currentState!.validate()) {
                      MemberHelper().insertMember(widget.member).then((value) =>
                          Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) =>
                                      MemberSuccessfulAddedPage(
                                          member: widget.member))));
                    }
                  },
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text("Terminer", style: TextStyle(color: Colors.white)),
                      Icon(
                        Icons.check_circle_outline,
                        color: Colors.white,
                      ),
                    ],
                  ),
                ),
              )),
        ]),
      )),
    );
  }
}
