import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:gestion_des_membres/screens/personne_physique_non_exploitant/personnePhysiqueAddPage3.dart';
import 'package:nb_utils/nb_utils.dart';

import '../../config/constants.dart';
import '../../models/Member.dart';
import '../../utils/design.util.dart';
import '../../utils/parse_to_json.dart';

class PersonnePhysiqueAddPage2 extends StatefulWidget {
  final Member member;

  const PersonnePhysiqueAddPage2({Key? key, required this.member})
      : super(key: key);

  @override
  State<PersonnePhysiqueAddPage2> createState() =>
      _PersonnePhysiqueAddPage2State();
}

class _PersonnePhysiqueAddPage2State extends State<PersonnePhysiqueAddPage2> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  List _departments = [], municipalities = [], localities = [], districts = [];

  @override
  void initState() {
    super.initState();
    _getDepartments();
    print(widget.member.profession);
  }

  _getDepartments() async {
    final String response = await rootBundle
        .loadString('assets/src/decoupage_territorial_benin.json');
    final value = await json.decode(response);
    setState(() {
      _departments = parseJsonData(value, 'departments');
    });
  }

  _getAppropriateMunicipalities(String departmentName) async {
    setState(() {
      municipalities = _departments
          .where((c) => c.department == departmentName)
          .toList()
          .first
          .communes;
    });
  }

  _getAppropriateDistricts(String municipalityName) async {
    setState(() {
      districts = municipalities
          .where((c) => c.commune == municipalityName)
          .toList()
          .first
          .arrondissements;
    });
  }

  _getAppropriateLocalities(String districtName) async {
    setState(() {
      localities = districts
          .where((c) => c.arrondissement == districtName)
          .toList()
          .first
          .quartiers;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: Builder(
          builder: (BuildContext context) {
            return IconButton(
              icon: Icon(Icons.arrow_back_ios),
              onPressed: () {
                Navigator.pop(context);
              },
              tooltip: MaterialLocalizations.of(context).openAppDrawerTooltip,
            );
          },
        ),
        elevation: 0,
        titleSpacing: 40,
        centerTitle: true,
        backgroundColor: primaryColor,
        title: Text("Etape 2/5"),
      ),
      body: SingleChildScrollView(
          child: Form(
        key: _formKey,
        child: Column(children: [
          Container(
            child: Padding(
              padding: const EdgeInsets.all(15.0),
              child: Text(
                "Veuillez renseigner les informations de localisation du membre :",
                textAlign: TextAlign.center,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 5),
                child: DropdownButtonFormField(
                  hint: Text("Choisir un département"),
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: _departments.map((item) {
                    return new DropdownMenuItem(
                      value: item.department,
                      child: new Text(item.department),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      widget.member.department = value.toString();
                    });
                    _getAppropriateMunicipalities(value as String);
                  },
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  validator: (value) {
                    if (value == null) {
                      return 'Ce champ est requis';
                    }
                  },
                  decoration:
                      themeInputDecoration.copyWith(labelText: 'Département'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 5),
                child: DropdownButtonFormField(
                  hint: Text("Choisir une commune"),
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: municipalities.map((item) {
                    return new DropdownMenuItem(
                      value: item.commune,
                      child: new Text(item.commune),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      widget.member.municipality = value.toString();
                    });
                    _getAppropriateDistricts(value as String);
                  },
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  validator: (value) {
                    if (value == null) {
                      return 'Ce champ est requis';
                    }
                    return null;
                  },
                  decoration:
                      themeInputDecoration.copyWith(labelText: 'Commune'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 5),
                child: DropdownButtonFormField(
                  hint: Text("Choisir un arrondissement"),
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: districts.map((item) {
                    return new DropdownMenuItem(
                      value: item.arrondissement,
                      child: new Text(item.arrondissement),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      widget.member.district = value.toString();
                    });
                    _getAppropriateLocalities(value as String);
                  },
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  validator: (value) {
                    if (value == null) {
                      return 'Ce champ est requis';
                    }
                  },
                  decoration: themeInputDecoration.copyWith(
                      labelText: 'Arrondissement'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Container(
                padding: EdgeInsets.only(top: 10, bottom: 5),
                child: DropdownButtonFormField(
                  hint: Text("Choisir un village ou ville"),
                  style: TextStyle(
                      color: Colors.black, fontWeight: FontWeight.bold),
                  items: localities.map((item) {
                    return new DropdownMenuItem(
                      value: item.quartier,
                      child: new Text(item.quartier),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      widget.member.locality = value.toString();
                    });
                  },
                  autovalidateMode: AutovalidateMode.onUserInteraction,
                  validator: (value) {
                    if (value == null) {
                      return 'Ce champ est requis';
                    }
                    return null;
                  },
                  decoration:
                      themeInputDecoration.copyWith(labelText: 'Ville/village'),
                ),
                decoration:
                    BoxDecoration(borderRadius: BorderRadius.circular(10))),
          ),
          10.height,
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: AppTextField(
              isValidationRequired: true,
              errorThisFieldRequired: "Ce champ est requis",
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return "Ce champ est requis";
                }
                return null;
              },
              onChanged: (value) {
                setState(() {
                  widget.member.address = value.toString();
                });
              },
              // Optional
              textFieldType: TextFieldType.MULTILINE,
              minLines: 3,
              decoration: InputDecoration(
                  labelText: 'Indication sommaire du membre',
                  border: OutlineInputBorder()),
            ).validate(),
          ),
          20.height,
          Container(
              margin: EdgeInsets.only(left: 48, right: 48, bottom: 18),
              child: SizedBox(
                width: double.infinity,
                height: 50.0,
                child: ElevatedButton(
                  style: ButtonStyle(
                      backgroundColor:
                          MaterialStateProperty.all<Color>(primaryColor),
                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                          RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ))),
                  onPressed: () {
                    if (_formKey.currentState!.validate()) {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) => PersonnePhysiqueAddPage3(
                                  member: widget.member)));
                    }
                  },
                  child: Icon(
                    Icons.arrow_circle_right_outlined,
                    color: Colors.white,
                  ),
                ),
              )),
        ]),
      )),
    );
  }
}
